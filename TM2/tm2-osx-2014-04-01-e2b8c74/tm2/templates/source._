<!DOCTYPE html>
<html>

<head>
  <meta charset='UTF-8'/>
  <link href='/app/icon.png' rel='apple-touch-icon' />
  <link href='/ext/codemirror/codemirror.css' rel='stylesheet' />
  <link href='/ext/mapbox.css' rel='stylesheet' />
  <link href='/ext/base/base.css' rel='stylesheet' />
  <link href='/app/app.css' rel='stylesheet' />
  <link href='/app/source.css' rel='stylesheet' />
  <script src='/ext/underscore-min.js'></script>
  <script src='/ext/codemirror/codemirror.js'></script>
  <script src='/ext/codemirror/runmode.js'></script>
  <script src='/ext/codemirror/sql.js'></script>
  <script src='/ext/jquery-2.0.3.min.js'></script>
  <script src='/ext/jquery.sortable.js'></script>
  <script src='/ext/sexagesimal.js'></script>
  <script src='/ext/backbone.js'></script>
  <script src='/ext/mapbox.js'></script>
  <script src='/app/lib.js'></script>
  <title><%= source.name %></title>
</head>

<body id='view' class='<%= agent %> dark'>

<div id='perf'></div>

<form id='settings' class='z10 col12 pin-top'>
<div class='z1 col6 pin-right fill-blue dark scroll-styled'>
  <%= this.history(obj) %>
</div>
  <a href='#' class='fill-darken1 col12 pin-left pin-bottom'></a>
  <div class='project-settings dark fill-dark round contain col4 pin-topleft'>
    <% var disabled = remote ? "disabled='disabled'" : ''; %>
    <a class="pad1 quiet icon x submit pin-topright" href="#"></a>
    <header class='pad2 keyline-bottom'>
      <h3>Settings</h3>
    </header>

    <div class='pad2'>
      <fieldset>
        <section class='space-bottom1'>
          <label>Name</label>
          <input <%= disabled %> class='stretch short small' name='name' type='text' value='<%= _(source.name).escape() %>'/>
        </section>
        <section class='space-bottom1'>
          <label>Description</label>
          <textarea <%= disabled %> class='stretch short small' name='description' type='text' cols='60' rows='8'><%= source.description %></textarea>
        </section>
        <section class='space-bottom1'>
          <label>Attribution</label>
          <input <%= disabled %> class='stretch short small' name='attribution' type='text' value='<%= _(source.attribution).escape() %>'></textarea>
        </section>
      </fieldset>
      <fieldset class='pad1 space-bottom2 keyline-all round'>
        <section class='space-bottom0 clearfix'>
          <label class='inline col4'>Minzoom</label>
          <input <%= disabled %> id='minzoom' name='minzoom' class='min' type='range' value='<%= source.minzoom %>' min='0' max='22' step='1' onchange='rangeHandler(this, "max", "#maxzoom");' />
          <span class='small quiet code inline range' id='minzoom-val'><%= source.minzoom %></span>
        </section>
        <section class='space-bottom0 clearfix'>
          <label class='inline col4'>Maxzoom</label>
          <input <%= disabled %> id='maxzoom' name='maxzoom' class='max' type='range' value='<%= source.maxzoom %>' min='0' max='22' step='1' onchange='rangeHandler(this, "min", "#minzoom");' />
          <span class='small quiet code inline range' id='maxzoom-val'><%= source.maxzoom %></span>
        </section>
      </fieldset>

      <% if (!remote) { %>
        <section class='pill col12 clearfix'><!--
          --><a href='#' class='quiet button col6 icon js-save floppy'>Save</a><!--
          --><a href='/mbtiles?id=<%= source.id %>' class='quiet button col6 icon share'>Export</a>
        </section>
      <% } else { %>
        <section class='text-right space clearfix'>
          <a href='#' class='col6 fr quiet button icon js-save floppy'>Save</a>
        </section>
      <% } %>
    </div>
</div>
</form>

<form id='bookmark' class='z1 contain fill-dark round animate'>
  <input id='addbookmark' type='text' class='col12 clean round small' value='' placeholder='Name a bookmark' autocomplete='off' />
  <div class='pin-topright pad0'>
    <input type='submit' class='short quiet button' value='Add' />
  </div>
  <ul id='bookmark-list' class='clip fill-dark scroll-styled round-bottom'></ul>
</form>

<form id='search' class='z1 contain fill-dark round animate'>
  <input id='dosearch' type='text' class='col12 clean small round' value='' placeholder='Search' autocomplete='off' />
  <div class='pin-topleft pad1'>
    <span class='icon search'></span>
  </div>
  <ul id='search-results' class='clip fill-dark dark scroll-styled round-bottom'></ul>
</form>

<div id='full' class='clip animate pin-left'>
  <div id='title' class='contain inline pin-topleft z1'>
    <div class='inline clip fill-darken2 row1'><!--
      --><a href='#user' class='inline avatar align-middle'><img src='<%= user.avatar %>' /></a><!--
      --><a href='#settings' class='icon inline sprocket button unround quiet'><!--
      --><span title='<%= source.name || "Untitled" %>' class='js-name inline truncate project-name'><%= source.name || 'Untitled' %></span>
      </a><!--
      <% if (source._tmp) { %>
      --><a class='button icon floppy settings-n js-save unround' href='#saveas'>Save as</a>
      <% } else { %>
      --><a class='button icon floppy settings-n js-save unround' href='#'>Save</a>
      <% } %>
    </div>
  </div>
  <div id='map' class='animate dark' style='background-color:<%=source.background%>;'></div>
  <div id='map-overlay'></div>
  <div id='map-errors'></div>
  <div id='zoomedto' class='fill-dark contain z<%=source.center[2]%>'></div>

  <div id='map-controls'>
    <div class='inline'>
      <div class='z1 fill-dark'>
        <a href='#' id='zoom-in' title='Zoom in' class='icon plus keyline-right quiet'></a><!--
        --><a href='#' id='zoom-out' title='Zoom out' class='icon minus keyline-right quiet'></a>
      </div>
    </div>
    <div class='inline'>
      <div class='z1 fill-dark'>
        <a href='#search' title='Search' class='search-n dark keyline-right icon search quiet '></a><!--
        --><a href='#' title='Close search' class='search-y fill-darken2 icon keyline-right search'></a><!--
        --><a href='#bookmark' title='Bookmarks' class='bookmark-n dark icon marker quiet'></a><!--
        --><a href='#' title='Close bookmarks' class='bookmark-y fill-darken2 icon marker'></a>
      </div>
    </div>
    <a href='#full' title='Toggle fullscreen' class='full-n inline fill-dark icon fullscreen quiet'></a>
    <a href='#' title='Exit fullscreen' class='full-y fill-dark dark icon fullscreen'></a>
  </div>
  <div id='refresh' class='animate fill-darken2 col12 pad2 pin-bottom'>
    <span class='icon info'>To view inspect and visibility adjustments, <a href='#' class='js-save'>Save now</a>.</span>
    <a href='#' class='quiet pin-topright inline pad1 icon close'></a>
  </div>
</div>

<%
var revlayers = remote ? source.vector_layers.slice(0) : source.Layer.slice(0);
revlayers.reverse();
%>
<div id='source-ui' class='z1 animate menu source-menu fill-dark dark col6 pin-right'>

  <div id='docs' class='pane animate pin-left fill-dark scroll-styled col6'>
    <%= this['sourcedocs']() %>
  </div>
  <div id='layers'>
    <nav class='pad1x row1 col12 pin-top keyline-bottom fill-dark z1'>
      <div class='pin-topleft z1 row1'><!--
        --><a class='pad1 inline docs-n icon help unround align-middle fill-darken0 keyline-right' href='#docs'></a><!--
        --><a class='pad1 inline docs-y icon help unround align-middle fill-darken2 keyline-right' href='#'></a><!--
      --></div>
      <% if (remote) { %>
      <strong class='small inline pad1y pad4x'>Layers</strong>
      <% } else { %>
      <div class='inline pad0y pad4x'><a href='#addlayer' class='button quiet short icon plus'>Layers</a></div>
      <% } %>
      <div class='center pin-right col6 strong small'>
        <% if (!remote) { %>
        <span class='pad0x pad1y keyline-left col4 fr layer-label'>Delete</span>
        <% } %>
        <span class='pad0x pad1y col4 keyline-left fr layer-label'>Visibility</span>
        <span class='pad0x pad1y keyline-left col4 fr layer-label'>Inspect</span>
        <% if (remote) { %>
        <span class='pad0x pad1y keyline-left col4 fr layer-label'>Zoom</span>
        <% } %>
      </div>
    </nav>
    <div class='js-menu-content fill-dark pin-left col12 top1 scroll-styled'>
      <% _(revlayers).each(function(l) {
        print(this.layeritem(_({_prefs:source._prefs}).extend(l)));
      }.bind(this)); %>
    </div>
  </div>
</div>

<div class='z10' id='editor'>
<% if (!remote) {
  _(revlayers).each(function(l) {
    var type = (l.Datasource && l.Datasource.type);
    if (this['layer' + type]) print(this['layer' + type](_({
        tm: tm,
        vt: source.vector_layers.filter(function(v) { return v.id === l.id })[0]
    }).extend(l)));
  }.bind(this));
} %>
</div>

<% if (!remote) print(this.modalbrowser({
  id: 'browsefile',
  cwd: cwd,
  label: 'Select'
})); %>

<%= this.modaluser({name:user.name}) %>
<%= this.modalmessage() %>
<%= this.modalmapbox() %>
<%= this.modalbrowseropen({cwd:cwd, type:'style'}) %>
<%= this.modalbrowseropen({cwd:cwd, type:'source'}) %>
<%= source._tmp ? this.modalbrowsersave({cwd:cwd, type:'source'}) : '' %>

<% if (!remote) { %>
<form id='addlayer' class='modal round pad2 col6 margin3 fill-light'>
  <a class="pad1 quiet icon x submit pin-topright" href="#"></a>
  <fieldset class='col8 margin2 space-bottom1'>
    <input class='col12 space-bottom1' type='text' placeholder='layername' title='No spaces allowed.' size='20' name='id' pattern='\w+'/>
  </fieldset>
  <fieldset class='col8 margin2'>
    <div class='col12 scroll-styled radio-buttons'>
      <input name='type' type='radio' id='addlayer-postgis' value='postgis' checked >
      <label class='contain icon check quiet short button col12' for='addlayer-postgis'>
        PostGIS
        <span class='micro pin-right quiet pad0y pad1x'>Database</span>
      </label>
      <input name='type' type='radio' id='addlayer-shape' value='shape'>
      <label class='contain icon check quiet short button col12' for='addlayer-shape'>
        Shapefile
        <span class='micro pin-right quiet pad0y pad1x'>.shp</span>
      </label>
      <input name='type' type='radio' id='addlayer-geojson' value='geojson'>
      <label class='contain icon check quiet short button col12' for='addlayer-geojson'>
        GeoJSON
        <span class='micro pin-right quiet pad0y pad1x'>.json &amp; .geojson</span>
        </label>
      <input name='type' type='radio' id='addlayer-sqlite' value='sqlite'>
      <label class='contain icon check quiet short button col12' for='addlayer-sqlite'>
        SQLite
        <span class='micro pin-right quiet pad0y pad1x'>Database</span>
      </label>
      <input name='type' type='radio' id='addlayer-csv' value='csv'>
      <label class='contain icon check quiet short button col12' for='addlayer-csv'>
        CSV
        <span class='micro pin-right quiet pad0y pad1x'>.csv</span>
      </label>
    </div>
  </fieldset>
  </div>
  <div class='center'>
  <input class='js-reset-mode margin2 col8' type='submit' value='New layer'/>
  </div>
</form>
<% } %>

<a href='#' id='mask' class='fill-darken2 animate'></a>

<script>
var map, tiles, grids, gridc;

var templates = {};
templates.layeritem = <%= this.layeritem.source %>;
templates.layerconf = <%= this.layerconf.source %>;
templates.layerfields = <%= this.layerfields.source %>;
templates.layershape = <%= this.layershape.source %>;
templates.layerpostgis = <%= this.layerpostgis.source %>;
templates.layergeojson = <%= this.layergeojson.source %>;
templates.layersqlite = <%= this.layersqlite.source %>;
templates.layercsv = <%= this.layercsv.source %>;
templates.xraycolor = <%= this.xraycolor.source %>;

var tm = {};
tm.srs = <%= JSON.stringify(tm.srs) %>;

statHandler('srcbytes')();

// set initial page view to avoid #browsefile trap
$(function() { window.location.href = '#';});

var Layer = function(id, datasource) {
  var code;
  if (datasource && (datasource.type === 'postgis' || datasource.type === 'sqlite')) {
    code = CodeMirror($('#layers-' + id + ' div.sql').get(0), {
      value: datasource.table,
      lineNumbers: true,
      mode: 'text/x-plsql'
    });
    code.getWrapperElement().id = 'layers-' + id + '-code';
  }
  var layer = {
    code: code,
    form: $('#layers-' + id),
    item: $('#layers #'+id)
  };
  layer.refresh = function() {
    var l = _(editor.model.get('vector_layers')).find(function(l) { return l.id === id });
    var fields = l.fields || {};
    $('div.fields', layer.form).html(templates.layerfields(fields));
  };
  layer.get = function() {
    var attr = _($('#layers-' + id).serializeArray()).reduce(function(memo, field) {
      // @TODO determine what causes empty field names.
      if (!field.name) return memo;
      var group = field.name.split('-')[0];
      var name = field.name.split('-').slice(1).join('-');
      switch (group) {
      case 'fields':
      case 'properties':
      case 'Datasource':
        memo[group] = memo[group] || {};
        memo[group][name] = parseInt(field.value,10).toString() === field.value ? parseInt(field.value, 10) : field.value;
        break;
      default:
        memo[field.name] = parseInt(field.value,10).toString() === field.value ? parseInt(field.value, 10) : field.value;
        break;
      }
      return memo;
    }, {});
    if (code) {
      attr.Datasource = attr.Datasource || {};
      attr.Datasource.table = code.getValue();
    }
    return attr;
  };
  return layer;
};
var layers = _(<%=JSON.stringify(revlayers)%>).reduce(function(memo, l) {
  memo[l.id] = Layer(l.id, l.Datasource);
  return memo;
}, {});

var Source = Backbone.Model.extend({});
Source.prototype.url = function() { return '/source.json?id=' + this.get('id'); };

var Editor = Backbone.View.extend({});
Editor.prototype.events = {
  'click .js-save': 'save',
  'click .js-reset-mode': 'resetmode',
  'click .editor .js-tab': 'togglemode',
  'click .layer .js-delete': 'deletelayer',
  'click .layer .xrayswatch': 'togglelayer',
  'click .layer .xrayinspector': 'toggleinspector',
  'click .js-browsefile': 'browsefile',
  'click #settings .js-tab': 'tabbed',
  'click #docs .js-docs-nav': 'scrollto',
  'click .layer .js-tab': 'tabbedFields',
  'click #settings .js-ref-delete': 'delstyle',
  'submit #addlayer': 'addlayer',
  'submit #addmapbox': 'addmapbox',
  'submit #bookmark': 'addbookmark',
  'submit #search': 'search',
  'click #zoom-in': 'zoomin',
  'click #zoom-out': 'zoomout',
  'click #bookmark .bookmark-name': 'gotoBookmark',
  'click #bookmark .js-del-bookmark': 'removebookmark',
  'click .bookmark-n': 'focusBookmark',
  'click .search-result': 'selectSearch',
  'click .search-n': 'focusSearch',
  'submit #user': 'user',
  'keydown': 'keys'
};
Editor.prototype.keys = function(ev) {
  // Escape. Collapses windows, dialogs, modals, etc.
  if (ev.which === 27) {
    window.location.href = '#';
  }
  if ((ev.which === 38 || ev.which == 40) && window.location.hash == '#search') {
    // up and down on search results
    ev.preventDefault();
    this.navSearch(ev, (ev.which === 38 ? 1 : -1));
    return;
  }
  if ((!ev.ctrlKey && !ev.metaKey) || ev.shiftKey) return;
  var which = ev.which;
  switch (true) {
  case (which === 83): // s
    this.save();
    break;
  case (which === 190): // . for fullscreen
    ev.preventDefault();
    this.togglePane('full');
    break;
  case (which === 72): // h for help
    ev.preventDefault();
    this.togglePane('docs');
    break;
  case (which === 191): // / for settings
    ev.preventDefault();
    this.togglePane('settings');
    break;
  case (which === 66): // b for bookmarks
    ev.preventDefault();
    this.togglePane('bookmark');
    break;
  default:
    return true;
  }
  return false;
};
Editor.prototype.user = function() {
  window.location.href = window.location.origin + '/unauthorize';
  return false;
};
Editor.prototype.zoomin = function(out) {
  map.setZoom(map.getZoom()+1);
  return false;
};
Editor.prototype.zoomout = function() {
  map.setZoom(map.getZoom()-1);
  return false;
};
Editor.prototype.scrollto = function(ev) {
    id = $(ev.currentTarget).attr('href').split('#').pop();
    document.getElementById(id).scrollIntoView();
    return false;
};
Editor.prototype.tabbedFields = function(ev) {
  $(ev.currentTarget).parent('.layer').addClass('active').siblings('.layer').removeClass('active');
  return false;
};
Editor.prototype.togglePane = function(name) {
  var loc = location.href;
  if (loc.indexOf('#'+name) === -1) {
    location.href = loc.substring(0, loc.indexOf('#'))+'#'+name;
  } else {
    location.href = loc.replace('#'+name, '#');
  }
}
Editor.prototype.togglemode = function(ev) {
  var target = $(ev.currentTarget);
  switch (target.attr('href').split('#editor-').pop()) {
    case 'sql':
        $('body').addClass('sql').removeClass('conf').removeClass('fields');
        break;
    case 'conf':
        $('body').addClass('conf').removeClass('sql').removeClass('fields');
        break;
    case 'fields':
        $('body').addClass('fields').removeClass('sql').removeClass('conf');
        break;
  }
  tabbedHandler(ev);
  return false;
};

Editor.prototype.appendBookmark = function(name) {
  $('<li class="keyline-top contain"><a href="#" class="icon marker quiet pad0 col12 small bookmark-name truncate">'+name+'</a><a href="#" class="icon trash js-del-bookmark quiet pin-topright fill-dark pad0"></a></li>').appendTo('#bookmark-list');
};
Editor.prototype.gotoBookmark = function(ev) {
  var target = $(ev.currentTarget),
      coords = this.bookmarks[target.text()];
  map.setView([coords[0], coords[1]], coords[2]);
  return false;
};
Editor.prototype.removebookmark = function(ev) {
  ev.preventDefault();
  var target = $(ev.currentTarget).prev('a'),
      name = target.text();
  target.parent('li').remove();
  if (this.bookmarks[name]) delete this.bookmarks[name];
  localStorage.setItem('tm2.bookmarks', JSON.stringify(this.bookmarks));
  return false;
};
Editor.prototype.addbookmark = function(ev) {
  ev.preventDefault();
  var coords = map.getCenter(),
      zoom = map.getZoom(),
      field = $('#addbookmark'),
      fieldVal = field.val(),
      value = [coords.lat, coords.lng, zoom],
      name = fieldVal ? fieldVal : value;
  if (this.bookmarks[name]) return false;
  this.bookmarks[name] = value;
  localStorage.setItem('tm2.bookmarks', JSON.stringify(this.bookmarks));
  field.val('');
  this.appendBookmark(name);
  return false;
};
Editor.prototype.removebookmark = function(ev) {
  ev.preventDefault();
  var target = $(ev.currentTarget).prev('a'),
      name = target.text();
  target.parent('li').remove();
  if (this.bookmarks[name]) delete this.bookmarks[name];
  localStorage.setItem(this.model.get('id') + '.bookmarks', JSON.stringify(this.bookmarks));
  return false;
};
Editor.prototype.addbookmark = function(ev) {
  ev.preventDefault();
  var coords = map.getCenter(),
      zoom = map.getZoom(),
      field = $('#addbookmark'),
      fieldVal = field.val(),
      value = [coords.lat, coords.lng, zoom],
      name = fieldVal ? fieldVal : value;
  if (this.bookmarks[name]) return false;
  this.bookmarks[name] = value;
  localStorage.setItem(this.model.get('id') + '.bookmarks', JSON.stringify(this.bookmarks));
  field.val('');
  this.appendBookmark(name);
  return false;
};
Editor.prototype.focusBookmark = function(ev) {
  $('#addbookmark').focus();
  return;
};
Editor.prototype.search = function(ev) {
  ev.preventDefault();
  var query = $('#search input').get(0).value;
  // This query is empty or only whitespace.
  if (/^\s*$/.test(query)) return null;

  // This query is too short. Wait for more input chars.
  if (query.length < 3) return;

  // The query matches what is currently displayed.
  if ($('#search input').val() == $('#dosearch').data('query')) return;

  var $results = $('#search-results');
  $results.html('');

  var latlon = (function(q) {
      var parts = sexagesimal.pair(q);
      if (parts) return { lat: parts[0], lon: parts[1] };
  })(query);

  if (latlon) {
    // just go there, no search
    map.setView([latlon.lat, latlon.lon]);
    return false;
  }

  $.ajax('/geocode?search=' + query).done(function(data) {
    var results = (data && data.results) ? data.results : [];
    if (!results.length) {
      $results.html('<li class="keyline-top contain pad0 col12 small">No results</li>');
    }
    $('#dosearch').data('query', query);
    results.forEach(function(result, idx) {
      var coords = result[0].lat + ',' + result[0].lon;
      var place = _(result.slice(1)).chain().filter(function(v) { return v.type !== 'zipcode'; }).pluck('name').value().join(', ');
      $('<li class="keyline-top contain"><a href="#" class="icon marker dark quiet pad0 col12 small search-result truncate '+(!idx ? 'active fill-lighten0': '')+'" data-coords="'+coords+'" data-type="'+result[0].type+'" data-bounds="'+(result[0].bounds||false)+'" data-idx="'+idx+'"><strong>'+result[0].name+'</strong><span class="small pad1x">'+place+'</span></a></li>').appendTo($results);
      selectSearch(false, $('#search-results [data-idx="0"]'));
    });
  });
  return false;
};
Editor.prototype.selectSearch = selectSearch = function(ev, selection) {
  var data;
  if (ev) {
    ev.preventDefault();
    selection = ev.currentTarget;
    data = ev.currentTarget.dataset;
  } else {
    data = selection[0].dataset;
  }
  $('#search-results a.active').removeClass('active fill-lighten0');
  $(selection).addClass('active fill-lighten0');
  if (data.bounds !== 'false') {
    var bounds = data.bounds.split(',');
    map.fitBounds([[bounds[1],bounds[0]], [bounds[3],bounds[2]]]);
  } else {
    var coords = data.coords.split(',');
    if (data.type === 'address') {
      map.setView(coords, Math.max(16, map.getZoom()));
    } else if (data.type === 'street') {
      map.setView(coords, Math.max(15, map.getZoom()));
    } else {
      map.setView(coords);
    }
  }
  return false;
};
Editor.prototype.navSearch = function(ev, dir) {
  var results = $('#search-results li');
  var active = results.find('.active')[0].dataset;
  var wanted = 0;
  if (dir === 1) {
    if (+active.idx - 1 < 0){
      wanted = results.length - 1;
    } else {
      wanted = +active.idx - 1;
    }
  } else {
    if (+active.idx + 1 > results.length - 1) {
      wanted = 0;
    } else {
      wanted = +active.idx + 1;
    }
  }
  this.selectSearch(false, $('#search-results [data-idx="'+wanted+'"]'));
  return false;
};
Editor.prototype.focusSearch = function(ev) {
  $('#dosearch').focus();
  return;
}
Editor.prototype.resetmode = function(ev) {
  $('body').removeClass('fields').removeClass('sql').removeClass('conf');
  $('.editor a.js-tab[href=#editor-conf]').addClass('active').siblings('a').removeClass('active');
};
Editor.prototype.togglelayer = function(ev) {
  $(ev.currentTarget).toggleClass('disabled');
};
Editor.prototype.toggleinspector = function(ev) {
  $('.js-layer .xrayinspector.active').removeClass('active');
  $(ev.currentTarget).addClass('active');
};
Editor.prototype.addlayer = function(ev) {
  var values = _($('#addlayer').serializeArray()).reduce(function(memo, field) {
    memo[field.name] = field.value;
    return memo;
  }, {});

  if (!values.id || !templates['layer' + values.type]) return false;

  if (!layers[values.id]) {
    var layer = {
      tm: tm,
      vt: {},
      id: values.id,
      properties: {
        minzoom:0,
        maxzoom:22,
        'buffer-size':0
      },
      Datasource: {
        type: values.type
      }
    };
    $('#editor').prepend(templates['layer' + values.type](layer));
    $('#layers .js-menu-content').prepend(templates['layeritem'](layer));
    layers[values.id] = Layer(values.id, layer.Datasource);

    window.location.hash = '#layers-' + values.id;
    $('#layers .js-menu-content').sortable('destroy').sortable();
  } else {
    window.location.hash = '#';
  }
  return false;
};
Editor.prototype.deletelayer = function(ev) {
  var id = $(ev.currentTarget).attr('id').split('-').pop();
  if (!layers[id]) return false;
  if (confirm('Remove layer "' + id + '"?')) {
    layers[id].form.remove();
    layers[id].item.remove();
    $('#layers .js-menu-content').sortable('destroy').sortable();
    delete layers[id];
  }
  window.location.href = '#';
  return false;
};
Editor.prototype.error = function(model, resp) {
  this.messageclear();
  if (resp.responseText) {
    this.messagemodal(resp.responseText);
  } else {
    this.messagemodal('Could not save source "' + model.id + '"');
  }
};
Editor.prototype.save = function(ev, options) {
  // Set map in loading state.
  $('#full').addClass('loading');

  // Grab settings form values.
  var attr = _($('#settings').serializeArray()).reduce(function(memo, field) {
    memo[field.name] = parseInt(field.value,10).toString() === field.value ? parseInt(field.value, 10) : field.value;
    return memo;
  }, this.model.attributes);

  // Grab layers. Reverse at save time.
  attr.Layer = _(layers).map(function(l) { return l.get() });
  attr.Layer.reverse();

  // Save center, disabled layers.
  attr._prefs = attr._prefs || {};
  if (this.model.get('_prefs').saveCenter) {
    var lon = map.getCenter().lng % 360;
    lon += (lon < -180) ? 360 : (lon > 180) ? -360 : 0;
    attr.center = [lon , map.getCenter().lat, map.getZoom() ];
  }
  attr._prefs.inspector = $('#layers .js-layer:has(.xrayinspector.active)').size()
    ? $('#layers .js-layer:has(.xrayinspector.active)').attr('id')
    : false;
  attr._prefs.disabled = _($('#layers .layer').map(function(v) {
    return $('.xrayswatch.disabled', this).size()
        ? $(this).attr('id')
        : false;
  })).compact();

  options = options || {
    success:_(this.refresh).bind(this),
    error: _(this.error).bind(this)
  };
  this.model.save(attr, options);

  return ev && !!$(ev.currentTarget).is('a');
};
Editor.prototype.refresh = function(ev) {
  this.messageclear();

  if (!map) {
    map = L.mapbox.map('map');
    map.setView([this.model.get('center')[1], this.model.get('center')[0]], this.model.get('center')[2]);
    map.on('zoomend', function() { $('#zoomedto').attr('class', 'contain z' + (map.getZoom()|0)); });
  }
  map.options.minZoom = this.model.get('minzoom');
  map.options.maxZoom = 22;

  // Refresh map layer.
  if (tiles) map.removeLayer(tiles);
  tiles = L.mapbox.tileLayer({
    tiles: ['/style/{z}/{x}/{y}.png?id=<%=source._style%>&mtime=' + this.model.get('mtime') ],
    minzoom: this.model.get('minzoom'),
    maxzoom: 22
  })
  .on('tileload', statHandler('srcbytes'))
  .on('load', errorHandler)
  .addTo(map);

  // Refresh gridcontrol template.
  if (grids) map.removeLayer(grids);
  if (gridc) map.removeControl(gridc);
  if (this.model.get('_template')) {
    grids = L.mapbox.gridLayer({
      grids: ['/style/{z}/{x}/{y}.grid.json?id=<%=source._style%>&mtime=' + this.model.get('mtime') ],
      minzoom: this.model.get('minzoom'),
      maxzoom: 22
    });
    gridc = L.mapbox.gridControl(grids, {
      follow: true,
      template: this.model.get('_template')
    });
    map.addLayer(grids);
    map.addControl(gridc);
  }

  // Refresh map title.
  $('title').text(this.model.get('name'));
  $('.js-name').text(this.model.get('name') || 'Untitled');

  // Clear save notice.
  if (window.location.hash === '#refresh') {
    window.location.hash = '#';
  };

  // Rerender fields forms.
  _(layers).each(function(l) { l.refresh() });

  // Get existing bookamarks
  this.bookmarks = localStorage.getItem('tm2.bookmarks') ? JSON.parse(localStorage.getItem('tm2.bookmarks')) : {};
  for (var b in this.bookmarks) {
    this.appendBookmark(b);
  }

  return false;
};
Editor.prototype.browsefile = function(ev) {
  var target = $(ev.currentTarget).siblings('input[name=Datasource-file]');
  $('.browsefile-pending').removeClass('browsefile-pending');
  target.addClass('browsefile-pending');
  $('#browsefile input[name=basename]').attr('title', target.attr('title'));
  $('#browsefile input[name=basename]').attr('pattern', target.attr('pattern'));
  $('#browsefile input[name=basename]').attr('placeholder', target.attr('placeholder'));

  // File browser.
  new views.Browser({
    el: $('#browsefile'),
    filter: function(file) {
      var target = $('.browsefile-pending');
      var pattern = target.size() && target.attr('pattern') && new RegExp(target.attr('pattern'));
      if (pattern) {
          return file.type === 'dir' || pattern.test(file.basename);
      } else {
          return file.type === 'dir';
      }
    },
    isFile: function(file) {
      var target = $('.browsefile-pending');
      var pattern = target.size() && target.attr('pattern') && new RegExp(target.attr('pattern'));
      if (pattern) {
          return file.type === 'dir' || pattern.test(file);
      } else {
          return file.type === 'dir';
      }
    },
    callback: function(err, filepath) {
      var target = $('.browsefile-pending');
      if (err || !target.size()) {
        window.location.href = '#';
      } else {
        target.val(filepath);
        window.location.href = '#' + target.parents('form').attr('id');
      }
    }
  });

};

Editor.prototype.messagemodal = messageModal;
Editor.prototype.messageclear = messageClear;
Editor.prototype.delstyle = delStyle;
Editor.prototype.tabbed = tabbedHandler;
Editor.prototype.addmapbox = addMapBox;

var editor = new Editor({
  el: document.body,
  model: new Source(<%= JSON.stringify(source) %>)
});
editor.refresh();

<% if (!remote) { %>
// Sortable layers.
$('#layers .js-menu-content').sortable();
$('#layers .js-menu-content').bind('sortupdate', function(ev, ui) {
  var ids = $('#layers .js-menu-content .js-layer').map(function() {
    return $(this).attr('id');
  }).get();
  layers = _(ids).reduce(function(memo, id) {
    memo[id] = layers[id];
    return memo;
  }, {});
});
<% } %>
</script>
</body>

</html>
