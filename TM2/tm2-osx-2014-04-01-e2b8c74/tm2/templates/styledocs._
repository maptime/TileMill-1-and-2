<%
var sections = {
    intro: null,
    points: {
        markers: symbolizers.markers,
        point: symbolizers.point
    },
    lines: {
        line: symbolizers.line,
        'line-pattern': symbolizers['line-pattern']
    },
    polygons: {
        polygon: symbolizers.polygon,
        'polygon-pattern': symbolizers['polygon-pattern'],
        building: symbolizers['building']
    },
    // @TODO Currently unsupported by TM2.
    // raster: { raster: symbolizers.raster },
    text: {
        text: symbolizers.text,
        shield: symbolizers.shield
    },
    misc: {
        misc: symbolizers['*'],
        debug: symbolizers.debug
    }
};
%>
<div class="row1 pad1 keyline-bottom">
  <h3>CartoCSS help</h3>
  <a href='#fonts' class='quiet pad1 small keyline-left strong fill-darken0 icon font short font-link pin-topright'>Fonts</a>
</div>

<nav class='fill-grey small clearfix col12 contain z1 strong'>
  <a href='#docs-intro'    class='js-docs-nav docs-nav row1 block quiet'><div class='col12 pad1 keyline-bottom icon home'>Overview</div></a>
  <a href='#docs-points'   class='js-docs-nav docs-nav row1 block quiet'><div class='col12 pad1 keyline-bottom icon marker'>Points</div></a>
  <a href='#docs-lines'    class='js-docs-nav docs-nav row1 block quiet'><div class='col12 pad1 keyline-bottom icon polyline'>Lines</div></a>
  <a href='#docs-polygons' class='js-docs-nav docs-nav row1 block quiet'><div class='col12 pad1 keyline-bottom icon polygon'>Polygons</div></a>
  <a href='#docs-text'     class='js-docs-nav docs-nav row1 block quiet'><div class='col12 pad1 keyline-bottom icon pencil'>Text</div></a>
  <a href='#docs-misc'     class='js-docs-nav docs-nav row1 block quiet'><div class='col12 pad1 keyline-bottom icon star'>Misc</div></a>
</nav>

<article class='small' id='docs-intro'>

<section class='keyline-bottom pad1'>
  <p><strong>Just starting?</strong> Read the <a href='http://mapbox.com/tilemill/docs/manual'>manual</a> for a full guide on using TileMill.</p>
</section>
<section class='pad1 contain fill-darken0 keyline-bottom'>
  <h3 class='space-bottom1'>Keyboard shortcuts</h3>
  <ul class='code space-bottom1'>
    <li><kbd class='prefixed'>s</kbd> Save style or source.</li>
    <li><kbd class='prefixed'>.</kbd> View map.</li>
    <li><kbd class='prefixed'>/</kbd> View settings.</li>
    <li><kbd class='prefixed'>h</kbd> View help.</li>
    <li><kbd class='prefixed'>b</kbd> View bookmarks.</li>
    <li><kbd>Esc</kbd> Close popup or window.</li>
  </ul>
  <ul class='code space-bottom1'>
    <li><h4>Style only:</h4></li>
    <li><kbd class='prefixed'>d</kbd> View data.</li>
    <li><kbd class='prefixed'>alt</kbd>+<kbd>[1-9]</kbd> Switch active stylesheet.</li>
    <li><kbd class='prefixed'>f</kbd> Search current stylesheet.</li>
  </ul>
  <ul class='code space-bottom1'>
    <li><h4>While interacting with map:</h4></li>
    <li><kbd class='prefixed'>+</kbd> &amp; <kbd class='prefixed'>-</kbd> Zoom in and out.</li>
  </ul>
  <p>Override shortcuts by holding <kbd>Shift</kbd>.</p>
</section>
<section class='pad1 keyline-bottom'>
  <h3 class='space-bottom1'>Selectors</h3>
  <p><a target='_blank' href='http://www.tilemill.com'>TileMill</a> supports the <a target='_blank' href="https://github.com/mapbox/carto">carto</a> map styling language. It should be familiar to CSS users and easy to pick up for everyone else.</p>
  <p>A simple carto style looks like</p>
<pre class='carto-snippet'>
#world {
  polygon-fill: #eee;
  line-color: #ccc;
  line-width: 0.5;
}</pre>
  <p>Which is the <em>selector</em> <code>#world</code> - which makes this affect the layer with the id <code>world</code>, and then three <em>declarations</em> which color the countries the color <code>#eee</code> and give them a grey line <code>0.5</code> units wide.</p></p>
  <p>There are other selectors you can use to affect different parts of a map:</p>
<pre class='carto-snippet'>
// all layers
* {}
// layers with class "red"
.red {}
// layers with class blue beyond zoom 8
.blue[zoom > 8] {}
// features in #countries with NAME 'USA'
#countries[NAME='USA']</pre>
  <p>The order of selectors does not matter as there is no hierarchical structure in maps. Separating selector parts with spaces is optional. The following selectors are thus equivalent:</p>
<pre class='carto-snippet'>
#world [NAME='USA'] .red [zoom &gt; 10]
[zoom &gt; 10].red#world[NAME='USA']
[NAME='USA'] [zoom &gt; 10] #world.red</pre>
</section>
<section class='pad1 keyline-bottom'>
  <h3 class='space-bottom1'>Nested styles</h3>
  <p>TileMill allows you to arbitarily nest styles. All elements are added to create a combining selector. The order of elements in a selector is not of importance.</p>
<pre class='carto-snippet'>
// Applies to all layers with .land class
.land {
  polygon-fill: #eee;
  // Applies to #lakes.land
  #lakes { polygon-fill: #000; }
}</pre>
  <p>This can be a convenient way to group style changes by zoom level:</p>
<pre class='carto-snippet'>
// Applies to all layers at zoom &gt; 1
[zoom &gt; 1] {
  polygon-gamma: 0.3;
  #world { polygon-fill: #323; }
  #lakes { polygon-fill: #144; }
}</pre>
</section>
<section class='pad1 keyline-bottom'>
  <h3 class='space-bottom1'>Attachments</h3>
  <p>By default, if you set a style rule, it overrides any previous style rules. However, sometimes you want to add multiple instances of a style, like in the case of a road border, country outline or for glow effects.</p>
<pre class='carto-snippet'>
#world {
  ::outline {
    line-color: #000;
    line-width: 6;
  }
  line-color: #fff;
  line-width: 3;
}</pre>
  <p>This style first renders a black line with width <code>6</code>, and on top of that, an additional white line with width <code>3</code>. You can use an arbitrary amount of attachments to draw the same feature multiple times. The order in which you define attachments matters, the earlier it is defined, the lower it is drawn. This means that you should define shadows first before defining the actual feature symbolizer.</p>
  <p>When nesting attachments, they are concatenated together with a <code>/</code>:</p>
<pre class='carto-snippet'>
::outline {
  ::shadow {
  // creates a symbolizer named "outline/shadow"
  }
}</pre>
</section>
<section class='pad1 keyline-bottom'>
  <h3 class='space-bottom1'>Values</h3>
  <p>Different properties in carto accept different types of values - colors, dimensions, and more.</p>
  <h4>Colors</h4>
  <p>Carto accepts a variety of syntaxes for colors - HTML-style hex values,
  rgb, rgba, and hsl. It also supports the predefined HTML colors names, like
  <code>yellow</code> and <code>blue</code>.</p>
<pre class='carto-snippet'>
#line {
  line-color: #ff0;
  line-color: #ffff00;
  line-color: rgb(255, 255, 0);
  line-color: rgba(255, 255, 0, 1);
  line-color: hsl(100, 50%, 50%);
  line-color: yellow;
}</pre>
  <h4>Dimensions</h4>
  <p>Dimensions in carto are always pixels; no <code>px</code> suffix is needed. Pixel dimensions are noted in the reference as <code>float</code> values.</p>
<pre class='carto-snippet'>
line-width: 5;</pre>
  <h4>Keywords</h4>
  <p>Some properties accept keyword arguments, which should be entered literally</p>
<pre class='carto-snippet'>
raster-mode: normal;</pre>
</section>
<section class='pad1 keyline-bottom'>
  <h3 class='space-bottom1'>Variables</h3>
  <p>You can define variables in stylesheets by prefixing an alphanumeric name with <code>@</code>.</p>
<pre class='carto-snippet'>
@green: #2B4D2D;
Map { background-color: @green; }
#world { polygon-fill: @green; }</pre>
</section>
<section class='pad1 keyline-bottom'>
  <h3 class='space-bottom1'>Operations</h3>
  <p>Any number, color or variable can be operated on using mathematical expressions.</p>
<pre class='carto-snippet'>
@gray: #888;

#world {
  polygon-fill: @gray + #111;
  line-width: 2 * 2;
  line-color: @gray / 2;
}</pre>
</section>
<section class='pad1 keyline-bottom'>
  <h3 class='space-bottom1'>Color functions</h3>
  <p>Carto inherits color manipulation functions from <a target='_blank' href='http://lesscss.org' target='_blank'>less.js</a>.</p>
<pre class='carto-snippet'>
// lighten or darken a color by 10%
lighten(@color, 10%);
darken(@color, 10%);

// de/saturate a color by 10%
saturate(@color, 10%);
desaturate(@color, 10%);

// adjust opacity of a color by 10%
fadein(@color, 10%);
fadeout(@color, 10%);

// set opacity of a color to 10%
fade(@color, 10%);

// adjust the hue of a color by 10 degrees
// (e.g. on a color wheel)
spin(@color, 10);
spin(@color, -10);</pre>

// mix @color1 into @color2 by 10%
mix(@color1,@color2, 10%);

// desaturate by 10%
greyscale(@color1, 10%);

</section>
</article>

<h3 class='pad1 contain keyline-bottom'>Carto Reference
  <div class='pad0 pin-bottomright'>
  <a href='#' class='js-expandall quiet button short expand-link'>
    <span class='expand-off'>Expand</span>
    <span class='hidden expand-on'>Collapse</span>
  </a>
  </div>
</h3>
<% _(sections).each(function(symbolizers, name) { %>
<article id='docs-<%= name.replace(/[^\w+]/g,'_') %>' class='small'>
  <% _(symbolizers).each(function(symbolizer) { %>
  <% _(symbolizer).chain()
      .filter(function(p) { return p.css; })
      .each(function(p, name) {
  %>
  <section id='docs-<%= p.css.replace(/[^\w+]/g,'_') %>' class='contain carto-ref'>
    <a href='#docs-<%= p.css.replace(/[^\w+]/g,'_') %>' class='js-tab pin-left pin-right js-tab'></a>
    <div class='small pad1x pad0y keyline-bottom'><%= p.css %></div>
    <span class='quiet micro pin-topright pad0 code type'><%=_(p.type).isArray() ? 'option block' : p.type%></span>
    </a>
    <div class='pad1 details'>
    <% if (p['default-value'] && p['default-value']!=='none') { %>
    <span class='space-bottom1 code quiet inline value'><%=p['default-value']%></span><br/>
    <% } %>
    <% if (_(p.type).isArray()) { %><span class='space-bottom1 inline code options'><%= p.type.join(' ') %></span><br/><% } %>
    <% if (p.doc) { %><div class='space-bottom1 quiet description break-word small'><%=p.doc%></div><% } %>
    </div>
  </section>
  <% }); %>
  <% }); %>
</article>
<% }); %>
