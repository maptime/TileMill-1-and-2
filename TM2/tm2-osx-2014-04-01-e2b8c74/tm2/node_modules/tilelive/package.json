{
  "name": "tilelive",
  "version": "4.5.3",
  "main": "./lib/tilelive.js",
  "description": "Frontend for various tile backends, mapnik and mbtiles",
  "url": "http://github.com/mapbox/tilelive.js",
  "keywords": [
    "map",
    "server",
    "mapnik",
    "tms"
  ],
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/mapbox/tilelive.js.git"
  },
  "author": {
    "name": "MapBox",
    "email": "info@mapbox.com",
    "url": "http://mapbox.com/"
  },
  "contributors": [
    {
      "name": "Tom MacWright",
      "email": "tmcw"
    },
    {
      "name": "Will White",
      "email": "willwhite"
    },
    {
      "name": "Dane Springmeyer",
      "email": "springmeyer"
    },
    {
      "name": "Young Hahn",
      "email": "yhahn"
    },
    {
      "name": "Konstantin KÃ¤fer",
      "email": "kkaefer"
    }
  ],
  "dependencies": {
    "optimist": "~0.6.0",
    "sphericalmercator": "~1.0.1"
  },
  "devDependencies": {
    "mbtiles": "~0.2.8",
    "tilejson": "~0.6.0",
    "tilelive-mapnik": "~0.6.2"
  },
  "bin": {
    "tilelive-copy": "./bin/copy"
  },
  "engines": {
    "node": ">= 0.6.0 < 0.11.0"
  },
  "scripts": {
    "test": "mocha -R spec -t 10000"
  },
  "readme": "# tilelive.js\n\ntilelive.js is an interface for tilestore modules for [node.js](http://nodejs.org/). It defines an [API](https://github.com/mapbox/tilelive.js/blob/master/API.md) to interact with implementations for a particular tile store.\n\n[![Build Status](https://secure.travis-ci.org/mapbox/tilelive.js.png)](http://travis-ci.org/mapbox/tilelive.js)\n\n## Backends\n\n- [MBTiles](https://github.com/mapbox/node-mbtiles)\n- [TileJSON](https://github.com/mapbox/node-tilejson)\n- [Mapnik](https://github.com/mapbox/tilelive-mapnik)\n\n## Usage\n\nTilelive doesn't ship with any Tilestore backends by default. To use a particular backend, register it with tilelive using `require('[implementation]').registerProtocols(tilelive);`.\n\n* `tilelive.list(source, callback)`: Lists all tilesets in a directory. `source` is a folder that is used by registered implementations to search for individual tilesets. `callback` receives an error object (or `null`) and a hash hash with keys being Tilestore IDs and values being Tilestore URIs. Example:\n\n```javascript\n{\n    \"world-light\": \"mbtiles:///path/to/file/world-light.mbtiles\",\n    \"mapquest\": \"tilejson:///path/to/file/mapquest.tilejson\"\n}\n```\n\n* `tilelive.findID(source, id, callback)`: Looks for a particular tileset ID in a directory. `callback` receives an error object (or `null`) and the URI of the tileset.\n\n\n* `tilelive.load(uri, callback)`: Loads the Tilestore object associated with the specified `uri`. `callback` receives an error object (or `null`) and the Tilestore object.\n\n* `tilelive.info(uri, callback)`: Loads the Tilestore object associated with the specified `uri` and retrieves its metadata in a [TileJSON](http://github.com/mapbox/tilejson) compliant format. `callback` receives an error object (or `null`), the metadata hash and the Tilestore object.\n\n* `tilelive.all(source, callback)`: Loads metadata in a [TileJSON](http://github.com/mapbox/tilejson) compliant format for all tilesets in the `source` directory. `callback` receives an error object (or `null`) and an array with TileJSON metadata about each tileset in that directory.\n\n\n* `tilelive.verify(tilejson)`: Validates a TileJSON object and returns error objects for invalid entries.\n\n* `tilelive.copy(args, callback)`: Copies data from one tilestore into another tilestore. `args` is a configuration hash with these keys:\n\n  * `source`: a Tilestore object that implements the Tilesource interface\n  * `sink`: a Tilestore object that implements the Tilesink interface\n  * `bbox`: an array with W/S/E/N boundaries in WGS84 format (-180...180, -90...90)\n  * `minZoom`: the minimum zoom for data to be copied (inclusive)\n  * `maxZoom`: the maximum zoom for data to be copied (inclusive)\n  * `concurrency`: (default: `100`) how many data objects should be copied simultaneously.\n  * `callback`: (optional) called when copying is complete\n  * `tiles`: copy tiles (`true` or `false`)\n  * `grids`: copy grids (`true` or `false`)\n\n  This function returns an EventEmitter that has these events emitted:\n\n  * `warning`: An error occurred during copying. `err` is the first argument.\n  * `error`: An error occured while initializing the tilesource/tilesink.\n  * `finished`: Copying completed\n\n  The EventEmitter also has these properties. They are updated continuously while copying. Check them occassionally to report status to the user.\n\n  * `copied`: Number of elements that have been copied so far\n  * `failed`: Number of elements that couldn't be copied.\n  * `total`: Total number of elements to be copied.\n  * `started`: Timestamp of when the action started in milliseconds after epoch\n\n## bin/tilelive\n\ntilelive can be used to copy data between tilestores. For a full list of options, run `bin/tilelive`.\n\n## Tests\n\nTo run the tests\n\n    npm test\n\n## Usage\n\nSee `examples` for examples of a tilelive powered server.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mapbox/tilelive.js/issues"
  },
  "homepage": "https://github.com/mapbox/tilelive.js",
  "_id": "tilelive@4.5.3",
  "dist": {
    "shasum": "83e64e5b8123edc03030ab623d65290023ee30d0"
  },
  "_from": "tilelive@4.5.x",
  "_resolved": "https://registry.npmjs.org/tilelive/-/tilelive-4.5.3.tgz"
}
